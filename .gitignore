# Binaries for programs and plugins
*.exe
*.exe~
*.dll
*.so
*.dylib
*.test
*.out

# Project-local glide cache, RE: https://github.com/Masterminds/glide/issues/736
.glide/

# Project-local Vendor directory
vendor/

# Output of the go coverage tool, specifically when used with LiteIDE
*.out

# Dependency directories (remove the comment below to include it)
# vendor/

# IntelliJ project files
.idea/

# VSCode settings
.vscode/

# Compiled Object files, Static and Dynamic libs (Shared Objects)
*.o
*.a
*.so

# Folders
_obj
_test

# Architecture specific extensions/prefixes
[568vq].out
*.cgo1.go
*.cgo2.c
_cgo_defun.c
_cgo_gotypes.go
_cgo_export.*

# Go build cache
# https://golang.org/cmd/go/#hdr-Build_and_test_caching
*.test
*.exe
*.test.exe
*.bench.exe
*.coverprofile
*.out
*.prof

# Output of "go build"
/main

# Since Go 1.14, the go command now maintains a cache of recently used modules
# https://golang.org/doc/go1.14#go-command
# This cache is stored in $GOPATH/pkg/mod/cache/download
$GOPATH/pkg/mod/cache/download

# Exclude the Go Modules cache at the root of the project.
# https://golang.org/ref/mod#module-cache
/go/pkg/mod

# Exclude the binary produced by compiling the project.
/testdata
/bin
